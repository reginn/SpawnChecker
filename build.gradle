// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/

apply plugin: 'maven'
apply plugin: 'checkstyle'

apply from: 'project/version-writer.gradle'

def jreVersion = JavaVersion.VERSION_1_7
def encoding = 'UTF-8'

group = "net.awairo.mcmod"
archivesBaseName = "SpawnChecker"
version = versionInfo.version()

ext.modid = "spawnchecker"

sourceCompatibility = jreVersion
targetCompatibility = jreVersion
[compileJava, compileTestJava]*.options*.encoding = encoding

[runClient, runServer].each {
    it.jvmArgs += "-Dnet.awairo.develop=true"
    it.jvmArgs += "-Dnet.awairo.debug=true"
    it.jvmArgs += "-Dspawnchecker.ignoreFingerprintViolation=true"
    it.jvmArgs += "-Dspawnchecker.presetmode.ignoreFingerprintViolation=true"
}

minecraft {
    version = "1.12-14.21.0.2321"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20161220"

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // this configurations is copied this replacement configuration to source copy tasks
    replace '@VERSION@', project.version
    replace '@MC_VERSION@', project.minecraft.version
    replace '@FINGERPRINT@', project.hasProperty('signing_fingerprint') ? project.signing_fingerprint : ""
}

repositories {
    mavenCentral()
    maven {
        name = "awairo"
        url = "http://maven.awairo.net/"
    }
}

configurations {
    deployJars
}

dependencies {
    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    // use for deploy tasks
    deployJars 'org.apache.maven.wagon:wagon-ftp:2.2'
}

processResources {
    // inputs.property "version", project.version
    // inputs.property "mcversion", project.minecraft.version

    // exclude debug log configurations
    exclude 'Log4j-config.xsd', 'Log4j-events.dtd', 'Log4j-events.xsd', 'log4j2.xml'

    // expand variables and copy mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':versionInfo.version(), 'modinfoversion':versionInfo.modinfoVersion(), 'mcversion':minecraft.version
    }

    // from(sourceSets.main.resources.srcDirs) {
    //     exclude 'mcmod.info'
    // }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers.add('org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7')
    }
}

task deobfJar(type: Jar, dependsOn: classes) {
    classifier = 'dev'
    from sourceSets.main.output
}

task signJar(dependsOn:assemble) << {
    description = "signing jar files"

    if (project.hasProperty('signing_alias') && project.hasProperty('signing_storepass')) {
        logger.info('Signing jar')

        ant.signjar(
            jar: 'build/libs/*.jar',
            alias: project.signing_alias,
            storepass: project.signing_storepass
        )

    } else {
        logger.info('has not singing property')
    }
}

build { dependsOn signJar }

checkstyle {
    configFile = file('project/checkstyle.xml')
    ignoreFailures = true
}
checkstyleMain.excludes = ['net/awairo/mcmod/common/**']
checkstyleTest.excludes = ['**/*']

artifacts {
    archives jar
    archives deobfJar
    archives sourceJar
}

task release(dependsOn:[build]) << {
    description 'release '
}

task releaseSnapshot(dependsOn:[build]) << {
    description 'snapshot release'
}

// this update configurations be run after the configuration phase
gradle.taskGraph.whenReady { taskGraph ->

    // revision up if release
    if (taskGraph.hasTask(release)) {
        if (versionInfo.beta) {
            println ''
            println '-v-v-v-v-v-v-v-v-v-v-v-v-v-'
            println ''
            println '        BETA VERSION'
            println ''
            println '-v-v-v-v-v-v-v-v-v-v-v-v-v-'
            println ''
            println 'stop :release task...'

            throw new StopExecutionException("beta version")
        }

        logger.quiet('>>>RELEASE<<<')

        revisionUp()
        project.version = versionInfo.version()

    } else if (taskGraph.hasTask(releaseSnapshot)) {
        logger.quiet('>>>SNAPSHOT RELEASE<<<')

        writeVersion()
        project.version = versionInfo.snapshotVersion()

    } else {
        writeVersion()
        project.version = versionInfo.version()
    }

    // update configuration of source copy tasks
    project.tasks.withType(net.minecraftforge.gradle.user.TaskSourceCopy.class).each {
        t -> t.replace '@VERSION@', project.version
    }

    // update configuration of processResources task
    project.tasks.findAll { t -> t.name.equals("processResources") }.each { t ->
        t.from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'
            expand 'version':project.version, 'modinfoversion':versionInfo.modinfoVersion(), 'mcversion':minecraft.version
        }
    }

    // when the uploadArchives task has the mavenDeployer props
    if (uploadArchives.repositories.hasProperty('mavenDeployer')
            && uploadArchives.repositories.mavenDeployer.hasProperty('pom')) {
        uploadArchives.repositories.mavenDeployer.pom.version = project.version
    }

    logger.quiet('upload archives version: ' + version)
}

task wrapper(type: Wrapper) { gradleVersion = '2.14' }
